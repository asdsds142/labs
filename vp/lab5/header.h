#pragma once

/*Тема. Динамические матрицы.
Требования и общие указания к заданиям:  
    • разработать класс для работы с одной или несколькими матрицами, размерности которых являются полями класса 
    (см. лаб. работу 1). В конструкторе создать динамическую матрицу, а в деструкторе освободить память. 
    Предусмотреть методы для ввода, вывода динамической матрицы и в зависимости от варианта один или несколько методов для её обработки. 
    По усмотрению преподавателя в класс можно включить методы, реализующие задачи из нескольких вариантов;
    • предусмотреть цветной вывод результатов; 
    • там, где это можно, желательно использовать указатели для организации циклов. 
    Но при этом надо учитывать, что строки динамической матрицы в памяти располагаются не рядом; 
    • перестановки строк матрицы выполнять с помощью указателей..
    
    
    Variant 3
    Создать динамическую матрицу с разным количеством текущих оценок в строках. 
    Рассортировать строки, в которых нет 1, 2, или 3, по их среднему значению. 
    Строки, в которых есть плохие оценки, в сортировке не должны участвовать.*/


#include <iostream>
    
using namespace std;

class Matrix
{
private:
    int i, j;
    int **ptr;
    int *numbersnumber;
    double *average;
    bool *is_bad;

public:
    Matrix(int, int);
    Matrix(int, int, int);
    void replace_a1_a2(int a1, int a2);
    double calculate_string_average(int);
    void show();
    void sort();
};