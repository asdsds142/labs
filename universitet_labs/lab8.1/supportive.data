In designding and configuring a genetic algorithm, several decisions need to be made that
influence the performance of the algorithm. The performance concerns fall into two
areas: the algorithm should strive to perform well in finding good solutions to the prob-
lem, and the algorithm should perform efficiently from a computation perspective. It
would be pointless to design a genetic algorithm to solve a problem if the solution will be
more computationally expensive than other traditional techniques. The approach used
in encoding, the fitness function used, and the other algorithmic parameters influence
both types of performances in achieving a good solution and computation. Here are
some parameters to consider:
Chromosome encoding—The chromosome encoding method requires thought to
ensure that it is applicable to the problem and that the potential solutions strive for
global maxima. The encoding scheme is at the heart of the success of the algorithm.
Population size—The population size is configurable. A larger population
encourages more diversity in possible solutions. Larger populations, however,
require more computation at each generation. Sometimes, a larger population
balances out the need for mutation, which results in diversity at the start but no
diversity during generations. A valid approach is to start with a smaller
population and grow it based on performance.
Population initialization—Although the individuals in a population are
initialized randomly, ensuring that the solutions are valid is important for
optimizing the computation of the genetic algorithm and initializing individuals
with the right constraints.
Number of offspring—The number of offspring created in each generation can be
configured. Given that after reproduction, part of the population is killed off toUse cases for evolutionary algorithms
ensure that the population size is fixed, more offspring means more diversity, but
there is a risk that good solutions will be killed off to accommodate those
offspring. If the population is dynamic, the population size may change after
every generation, but this approach requires more parameters to configure and
control.
Parent selection method—The selection method used to choose parents can be
configured. The selection method must be based on the problem and the desired
explorability versus exploitability.
Crossover method—The crossover method is associated with the encoding
method used but can be configured to encourage or discourage diversity in the
population. The offspring individuals must still yield a valid solution.
Mutation rate—The mutation rate is another configurable parameter that
induces more diversity in offspring and potential solutions. A higher mutation
rate means more diversity, but too much diversity may deteriorate good-
performing individuals. The mutation rate can change over time to create more
diversity in earlier generations and less in later generations. This result can be
described as exploration at the start followed by exploitation.
Mutation method—The mutation method is similar to the crossover method in
that it is dependent on the encoding method used. An important attribute of the
mutation method is that it must still yield a valid solution after the modification
or assigned a terrible fitness score.
Generation selection methods—Much like the selection method used to choose
parents, a generation selection method must choose the individuals that will
survive the generation. Depending on the selection method used, the algorithm
may converge too quickly and stagnate or explore too long.
Stopping condition—The stopping condition for the algorithm must make sense
based on the problem and desired outcome. Computational complexity and time
are the main concerns for the stopping condition.